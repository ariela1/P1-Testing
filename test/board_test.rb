# frozen_string_literal: true

require_relative 'test_helper'
require_relative '../lib/board_model'
require 'test/unit'

# Revisa inicialización del tablero en modo fácil o difícil
class InitBoard < Test::Unit::TestCase
  def setup
    @easy_board =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    @hard_board =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
  end

  def test_board_dif_easy
    @board = Board.new
    @board.set_difficulty_easy
    # Ver si se actualizan todos los atributos del modelo
    assert_equal(@board.first_matrix_j1, @easy_board)
    assert_equal(@board.first_matrix_j2, @easy_board)
    assert_equal(@board.second_matrix_j1, @easy_board)
    assert_equal(@board.second_matrix_j2, @easy_board)
    assert_equal(@board.difficulty, 1)
    assert_equal(@board.rows, 10)
  end

  def test_board_dif_hard
    @board = Board.new
    @board.set_difficulty_hard
    # Ver si se actualizan todos los atributos del modelo
    assert_equal(@board.first_matrix_j1, @hard_board)
    assert_equal(@board.first_matrix_j2, @hard_board)
    assert_equal(@board.second_matrix_j1, @hard_board)
    assert_equal(@board.second_matrix_j2, @hard_board)
    assert_equal(@board.difficulty, 2)
    assert_equal(@board.rows, 15)
  end
end

# Revisa lógica del tablero
class BoardTest < Test::Unit::TestCase
  def setup
    @board = Board.new
    @board.set_difficulty_easy
  end

  def test_place_horizontal_ship
    # Coloca un barco de largo 5 en la primera fila
    @board.place_horizontal_ship(1, 1, 5, 1)
    expected_j1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', ' i ', ' m ', ' m ', ' m ', ' f ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    assert_equal(@board.first_matrix_j1, expected_j1)
  end

  def test_place_vertical_ship
    # coloca un barco de largo 4 desde board[4][5]
    @board.place_vertical_ship(5, 4, 7, 1)
    expected_j1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', ' i ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', ' m ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', ' m ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', ' f ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    assert_equal(@board.first_matrix_j1, expected_j1)
  end

  def test_place_x_first_player
    @board.add_attack_on_boards(1, 3, 3)
    expected =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', ' - ', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    assert_equal(@board.first_matrix_j2, expected)
    assert_equal(@board.second_matrix_j1, expected)
    assert_equal(@board.j1_attack, 0)
    assert_equal(@board.winner, false)
  end

  def test_place_x_second_player
    @board.add_attack_on_boards(2, 6, 7)
    expected =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', ' - ', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    assert_equal(@board.first_matrix_j1, expected)
    assert_equal(@board.second_matrix_j2, expected)
    assert_equal(@board.j2_attack, 0)
    assert_equal(@board.winner, false)
  end

  def test_place_i_first_player
    @board.mark(2, 5, ' i ', 2, 1)
    @board.add_attack_on_boards(1, 2, 5)
    expected_j1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', ' x ', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j2 = Marshal.load(Marshal.dump(expected_j1))
    expected_j2[2][5] = ' I '
    assert_equal(@board.first_matrix_j2, expected_j2)
    assert_equal(@board.second_matrix_j1, expected_j1)
    assert_equal(@board.j1_attack, 1)
    assert_equal(@board.winner, false)
  end

  def test_place_i_second_player
    @board.mark(6, 8, ' i ', 1, 1)
    @board.add_attack_on_boards(2, 6, 8)
    expected_j2 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', ' x ', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j1 = Marshal.load(Marshal.dump(expected_j2))
    expected_j1[6][8] = ' I '
    assert_equal(@board.second_matrix_j2, expected_j2)
    assert_equal(@board.first_matrix_j1, expected_j1)
    assert_equal(@board.j2_attack, 1)
    assert_equal(@board.winner, false)
  end

  def test_place_m_first_player
    @board.mark(4, 4, ' m ', 2, 1)
    @board.add_attack_on_boards(1, 4, 4)
    expected_j1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', ' x ', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j2 = Marshal.load(Marshal.dump(expected_j1))
    expected_j2[4][4] = ' M '
    assert_equal(@board.first_matrix_j2, expected_j2)
    assert_equal(@board.second_matrix_j1, expected_j1)
    assert_equal(@board.j1_attack, 1)
    assert_equal(@board.winner, false)
  end

  def test_place_m_second_player
    @board.mark(10, 10, ' m ', 1, 1)
    @board.add_attack_on_boards(2, 10, 10)
    expected_j2 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', ' x ', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j1 = Marshal.load(Marshal.dump(expected_j2))
    expected_j1[10][10] = ' M '
    assert_equal(@board.second_matrix_j2, expected_j2)
    assert_equal(@board.first_matrix_j1, expected_j1)
    assert_equal(@board.j2_attack, 1)
    assert_equal(@board.winner, false)
  end

  def test_place_f_first_player
    @board.mark(2, 3, ' f ', 2, 1)
    @board.add_attack_on_boards(1, 2, 3)
    expected_j1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', ' x ', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j2 = Marshal.load(Marshal.dump(expected_j1))
    expected_j2[2][3] = ' F '
    assert_equal(@board.first_matrix_j2, expected_j2)
    assert_equal(@board.second_matrix_j1, expected_j1)
    assert_equal(@board.j1_attack, 1)
    assert_equal(@board.winner, false)
  end

  def test_place_f_second_player
    @board.mark(10, 1, ' f ', 1, 1)
    @board.add_attack_on_boards(2, 10, 1)
    expected_j2 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', ' x ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    expected_j1 = Marshal.load(Marshal.dump(expected_j2))
    expected_j1[10][1] = ' F '
    assert_equal(@board.second_matrix_j2, expected_j2)
    assert_equal(@board.first_matrix_j1, expected_j1)
    assert_equal(@board.j2_attack, 1)
    assert_equal(@board.winner, false)
  end
end

# Revisa si caracteres se están accediendo correctamente
class CharTest < Test::Unit::TestCase
  def setup
    @board = Board.new
    board_1 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', ' i ', ' m ', ' m ', ' m ', ' f ', '_', '_', '_', '_', '_', '*'],
       ['*', ' i ', ' m ', ' m ', ' f ', '_', '_', '_', '_', '_', '_', '*'],
       ['*', ' I ', ' m ', ' f ', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', ' i ', ' M ', ' F ', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', ' i ', ' f ', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', ' - ', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]
    board_2 =
      [['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', ' x ', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', ' x ', ' x ', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', '*'],
       ['*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*']]

    @board.first_matrix_j1 = board_1
    @board.second_matrix_j1 = board_2
    @board.first_matrix_j2 = board_1
    @board.second_matrix_j2 = board_2
  end

  def test_get_symbol_first_j1
    symbol = @board.symbol_at(4, 2, 1, 1)
    assert_equal(symbol, ' M ')
  end

  def test_get_symbol_second_j1
    symbol = @board.symbol_at(3, 1, 1, 2)
    assert_equal(symbol, ' x ')
  end

  def test_get_symbol_first_j2
    symbol = @board.symbol_at(4, 3, 2, 1)
    assert_equal(symbol, ' F ')
  end

  def test_get_symbol_second_j2
    symbol = @board.symbol_at(3, 2, 2, 2)
    assert_equal(symbol, '_')
  end
end
